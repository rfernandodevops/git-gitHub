Description: >
  Ryan Fernando - CldFomation template - 2020
  -------------------------------------------
  Deploys a VPC
  Deploys a pair of public and private subnets spread across 2 AZs
  Deploys an Internet Gateway, with a default route on the public subnets
  Create Private and Public route tables
  Deploys a pair of NAT Gateways (one in each AZ),
  and default routes for them in the private subnets.

Resources:
  # Create a VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:  !Join ['', [!Ref "AWS::StackName", "-VPC" ]]

  # Create IGW for Internet connectivity
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Create 2 x Public Subnets in 2 AZs
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.30.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Pick 1st AZ in the list
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-A # Substitue function. <stackName-Public-A>

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.40.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Pick 2nd AZ in the list
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-B # Substitue function. <stackName-Public-B>

  # Create 2 x Private Subnets in 2 AZs
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.70.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Pick 1st AZ in the list
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-A # Substitue function. <stackName-Private-A>

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.80.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]    #  Pick 2nd AZ in the list
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-B # Substitue function. <stackName-Private-B>

  # Create Public Route table to route internet bound traffic
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Add NAT Gateway for Internet Access(software downloads) and attach an Elastic IP
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
      - Key: Name
        Value: !Sub NAT-${AWS::StackName}
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC

  # Create Pritvate Route table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private
  PrivateRoute1:  # Private route table can access web via NAT Gateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  # Attach Public subnets to public Route tables
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

    # Attach Private subnets to private Route tables
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable
